# GUI Frontend for the KStat electrochemical analyzer
# This script provides plotly graphs of voltammetric scans
# using Dash by Plotly (MIT licensed)
# Nico Fr√∂hberg, 2019
# nico.froehberg@gmx.de

import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_daq as daq
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
from dash import no_update
from time import time,sleep
from redisworks import Root
from ast import literal_eval
import json
from .app import app, write_config
from .. import redis_config
import pandas as pd

redis_host,redis_port = redis_config.get_config()
root = Root(host=redis_host, port=redis_port, db=0)

def plot_scan():
    return html.Div(id='voltammogram_graph_container',
        style={'width':'100%'},
        children=[
            dcc.Store(id='voltammogram_graph_file'),
            dcc.Graph(id='voltammogram_graph'),
            ]
        )

factors={'Cyclic Voltammetry Experiment\n':
    ['Comment','Samplerate','t_preconditioning1','t_preconditioning2',
    'v_preconditioning1','v_preconditioning2',
    'v1','v2','start','n_scans','slope'],
    'Linear Sweep Voltammetry Experiment\n':
    ['Comment','Samplerate','t_preconditioning1','t_preconditioning2',
    'v_preconditioning1','v_preconditioning2','start','stop','slope'],
    'Differential Pulse Voltammetry Experiment\n':
    ['Comment','Samplerate','t_preconditioning1','t_preconditioning2',
    'v_preconditioning1','v_preconditioning2','start','stop',
    'step_size','pulse_height','period','width'],
    'Squarewave Voltammetry Experiment\n':
    ['Comment','Samplerate','t_preconditioning1','t_preconditioning2',
    'v_preconditioning1','v_preconditioning2','start','stop',
    'step_size','pulse_height','frequency','n_scans']}
labels={'Comment':'Comment','Samplerate':'Sampling Frequency','t_preconditioning1':'Cleaning Time',
    't_preconditioning2':'Deposition Time','v_preconditioning1':'Cleaning Potential',
    'v_preconditioning2':'Deposition Potential','v1':'Vertex Potential','v2':'End Potential',
    'start':'Start Potential','stop':'End Potential','n_scans':'Number of Scans','slope':'Slope',
    'step_size':'Step Size','pulse_height':'Pulse Height','period':'Period',
    'width':'Pulse Width','frequency':'Frequency'}
experiment_types={'Cyclic Voltammetry Experiment\n':'Cyclic Voltammetry',
                  'Linear Sweep Voltammetry Experiment\n':'Linear Sweep Voltammetry',
                  'Squarewave Voltammetry Experiment\n':'Squarewave Voltammetry',
                  'Differential Pulse Voltammetry Experiment\n':'Differential Pulse Voltammetry'}
                  
# read scan parameters from the .txt file generated by the KStat driver
def get_parameters(file):
    # get parameter data
    parafile = file.replace('.csv','-parameters.txt')
    f = open(parafile,'r')
    type = f.readline()
    f.close()
    parameters = pd.read_csv(parafile, delim_whitespace=True, engine='python', names=['0','1','2','3'], index_col=0)
    params = {}
    params['type'] = {'label':'Type','value':experiment_types[type]}
    for factor in factors[type]:
        number = parameters['2'][factor]
        unit = parameters['3'][factor]
        if unit != None:
            value = number + ' ' + unit
        else:
            value = number
        params[factor] = {'label':labels[factor],'value':value}
    return params

# generate dash components to display scan parameters
def generate_param_components(params):
    param_components = []
    for factor in params:
        label = html.Div(children=params[factor]['label'], style={'width':'180px'})
        value = html.Div(children=params[factor]['value'], style={'width':'250px'})
        param_components.append(html.Div(children=[label,value],className='centered_row'))
    return html.Div(children=param_components,className='left_row')

@app.callback(
    [Output('voltammogram_graph','figure'),
     Output('scan_parameters_collapse','children')],
    [Input('voltammogram_graph_file','data')])
def update_plot_scan(file):
    params = get_parameters(file)
    collapse_params = generate_param_components(params)
    df=pd.read_csv(file)
    root.flush()
    config = literal_eval(str(root.config))
    graph_title = file.replace(str(root.working_directory),'').replace('.csv','')
    
    x_data = df.potential
    if params['type']['value'] in ['Cyclic Voltammetry','Linear Sweep Voltammetry']:
        y_data = df.current
    elif params['type']['value'] in ['Differential Pulse Voltammetry','Squarewave Voltammetry']:
        y_data = df.fbcurrent
        
    figure={
        'data':[{'x':x_data,
                 'y':y_data,
                 'marker':{'color':'rgb(155,240,255)'}
                 }
                ],
        'layout':{
            'title':{
                'text':graph_title,
                'font':{'color':'white'}},
            'xaxis':{
                'title':{
                    'text':'Potential [mV] vs. Ag/AgCl',
                    'font':{'color':'white'}},
                'autorange':'reversed',
                'gridcolor':'black',
                'zerolinecolor':'black',
                'zerolinewidth':2,
                'tickfont':{'color':'white'}
                },
            'yaxis':{
                'title':{
                    'text':'Current [A]',
                    'font':{'color':'white'}},
                'autorange':'reversed',
                'gridcolor':'black',
                'zerolinecolor':'black',
                'zerolinewidth':2,
                'tickfont':{'color':'white'}
                },
            'paper_bgcolor':'rgba(0,0,0,0)',
            'plot_bgcolor':'rgba(0,0,0,0)'
            }
        }
    return [figure,collapse_params]